// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jCmJKVw35RaDDpqbkpwXKJ
// Component: -7MylpuX16AdiD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import LinkButton from "../../LinkButton"; // plasmic-import: 2rJsUIT2Qz_G3/component
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent

import { useScreenVariants as useScreenVariantssmtgOrzLQnh4Yi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SMTGOrzLQnh4yi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: jCmJKVw35RaDDpqbkpwXKJ/projectcss
import sty from "./PlasmicProductCarousel.module.css"; // plasmic-import: -7MylpuX16AdiD/css

import DotCircleOIcon from "./icons/PlasmicIcon__DotCircleO"; // plasmic-import: JOF7SYHnu9EBLW/icon
import CircleOIcon from "./icons/PlasmicIcon__CircleO"; // plasmic-import: vC0egLZR6WL4w5/icon

export type PlasmicProductCarousel__VariantMembers = {
  slider: "first" | "second" | "third";
};
export type PlasmicProductCarousel__VariantsArgs = {
  slider?: SingleChoiceArg<"first" | "second" | "third">;
};
type VariantPropType = keyof PlasmicProductCarousel__VariantsArgs;
export const PlasmicProductCarousel__VariantProps = new Array<VariantPropType>(
  "slider"
);

export type PlasmicProductCarousel__ArgsType = {};
type ArgPropType = keyof PlasmicProductCarousel__ArgsType;
export const PlasmicProductCarousel__ArgProps = new Array<ArgPropType>();

export type PlasmicProductCarousel__OverridesType = {
  root?: p.Flex<"div">;
  productBox?: p.Flex<typeof ProductBox>;
  text?: p.Flex<"div">;
  productPrice?: p.Flex<typeof ProductPriceComponent>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  productMedia?: p.Flex<typeof ProductMedia>;
};

export interface DefaultProductCarouselProps {
  slider?: SingleChoiceArg<"first" | "second" | "third">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCarousel__RenderFunc(props: {
  variants: PlasmicProductCarousel__VariantsArgs;
  args: PlasmicProductCarousel__ArgsType;
  overrides: PlasmicProductCarousel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "slider",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.slider
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssmtgOrzLQnh4Yi()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <ProductBox
        data-plasmic-name={"productBox"}
        data-plasmic-override={overrides.productBox}
        className={classNames("__wab_instance", sty.productBox, {
          [sty.productBoxslider_second]: hasVariant($state, "slider", "second"),
          [sty.productBoxslider_third]: hasVariant($state, "slider", "third")
        })}
        id={
          hasVariant($state, "slider", "third")
            ? ("valvet-accent-arm-chair" as const)
            : hasVariant($state, "slider", "second")
            ? ("mapple-wood-accent-chair" as const)
            : ("cloth-covered-accent-chair" as const)
        }
      >
        <ph.DataCtxReader>
          {$ctx => (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox__sXo9F)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__s3PrP, {
                    [sty.freeBoxslider_first__s3PrPiEjQy]: hasVariant(
                      $state,
                      "slider",
                      "first"
                    ),
                    [sty.freeBoxslider_second__s3PrPtuJqD]: hasVariant(
                      $state,
                      "slider",
                      "second"
                    ),
                    [sty.freeBoxslider_third__s3PrP9Ol1Z]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Great Design Collection"}
                  </div>
                  <ProductTextField
                    className={classNames(
                      "__wab_instance",
                      sty.productTextField__ex7Bd
                    )}
                    field={"name" as const}
                  />

                  <ProductTextField
                    className={classNames(
                      "__wab_instance",
                      sty.productTextField__eE4Lw
                    )}
                    field={"description" as const}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Fo9B)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ou7Cr)}
                    />

                    <ProductPriceComponent
                      data-plasmic-name={"productPrice"}
                      data-plasmic-override={overrides.productPrice}
                      className={classNames("__wab_instance", sty.productPrice)}
                    />
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fKmiC)}
                  >
                    <p.PlasmicLink
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <LinkButton
                        text={"âŠ• Add to cart"}
                        type={"solidOrange" as const}
                      />
                    </p.PlasmicLink>
                    <LinkButton
                      className={classNames(
                        "__wab_instance",
                        sty.linkButton__btqpi
                      )}
                      text={"More Info"}
                      type={"blankOrange" as const}
                    />
                  </p.Stack>
                </p.Stack>
                <div
                  className={classNames(projectcss.all, sty.freeBox___56M9T)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <ProductMedia
                      data-plasmic-name={"productMedia"}
                      data-plasmic-override={overrides.productMedia}
                      className={classNames(
                        "__wab_instance",
                        sty.productMedia,
                        {
                          [sty.productMediaslider_second]: hasVariant(
                            $state,
                            "slider",
                            "second"
                          )
                        }
                      )}
                    />
                  ) : null}
                </div>
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ujqWj)}
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant($state, "slider", "third")
                      ? CircleOIcon
                      : hasVariant($state, "slider", "second")
                      ? CircleOIcon
                      : DotCircleOIcon
                  }
                  className={classNames(projectcss.all, sty.svg__pZaez, {
                    [sty.svgslider_second__pZaeztuJqD]: hasVariant(
                      $state,
                      "slider",
                      "second"
                    ),
                    [sty.svgslider_third__pZaez9Ol1Z]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                  role={"img"}
                />

                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant($state, "slider", "second")
                      ? DotCircleOIcon
                      : CircleOIcon
                  }
                  className={classNames(projectcss.all, sty.svg__ogDa9, {
                    [sty.svgslider_first__ogDa9IEjQy]: hasVariant(
                      $state,
                      "slider",
                      "first"
                    ),
                    [sty.svgslider_second__ogDa9TuJqD]: hasVariant(
                      $state,
                      "slider",
                      "second"
                    ),
                    [sty.svgslider_third__ogDa99Ol1Z]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                  role={"img"}
                />

                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant($state, "slider", "third")
                      ? DotCircleOIcon
                      : CircleOIcon
                  }
                  className={classNames(projectcss.all, sty.svg__lJhFo, {
                    [sty.svgslider_third__lJhFo9Ol1Z]: hasVariant(
                      $state,
                      "slider",
                      "third"
                    )
                  })}
                  role={"img"}
                />
              </p.Stack>
            </React.Fragment>
          )}
        </ph.DataCtxReader>
      </ProductBox>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "productBox", "text", "productPrice", "link", "productMedia"],
  productBox: ["productBox", "text", "productPrice", "link", "productMedia"],
  text: ["text"],
  productPrice: ["productPrice"],
  link: ["link"],
  productMedia: ["productMedia"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  productBox: typeof ProductBox;
  text: "div";
  productPrice: typeof ProductPriceComponent;
  link: "a";
  productMedia: typeof ProductMedia;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCarousel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCarousel__VariantsArgs;
    args?: PlasmicProductCarousel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCarousel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductCarousel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductCarousel__ArgProps,
          internalVariantPropNames: PlasmicProductCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCarousel";
  } else {
    func.displayName = `PlasmicProductCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCarousel = Object.assign(
  // Top-level PlasmicProductCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productBox: makeNodeComponent("productBox"),
    text: makeNodeComponent("text"),
    productPrice: makeNodeComponent("productPrice"),
    link: makeNodeComponent("link"),
    productMedia: makeNodeComponent("productMedia"),

    // Metadata about props expected for PlasmicProductCarousel
    internalVariantProps: PlasmicProductCarousel__VariantProps,
    internalArgProps: PlasmicProductCarousel__ArgProps
  }
);

export default PlasmicProductCarousel;
/* prettier-ignore-end */
