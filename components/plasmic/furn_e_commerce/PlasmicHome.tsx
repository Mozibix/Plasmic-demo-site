// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jCmJKVw35RaDDpqbkpwXKJ
// Component: RY36TX_vxL01H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: J7TbFtJ_8HL3b/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import ProductCarousel from "../../ProductCarousel"; // plasmic-import: -7MylpuX16AdiD/component
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: 53VSU5gUzuN_w/component
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import Ratings from "../../Ratings"; // plasmic-import: Fd6RmMDd-XPop3/component
import FeatureItem from "../../FeatureItem"; // plasmic-import: unP83YgsAg3Uv/component
import BlogPost from "../../BlogPost"; // plasmic-import: VfuWBhBfxNus-a/component
import Footer from "../../Footer"; // plasmic-import: qjuhIe4b4k4ss/component

import { useScreenVariants as useScreenVariantssmtgOrzLQnh4Yi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SMTGOrzLQnh4yi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: jCmJKVw35RaDDpqbkpwXKJ/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: RY36TX_vxL01H/css

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  home?: p.Flex<typeof ProductCarousel>;
  products?: p.Flex<"a"> & Partial<LinkProps>;
  featureItem?: p.Flex<typeof FeatureItem>;
  columns?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssmtgOrzLQnh4Yi()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qqUrx)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hhGkW)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hXfhL)}>
                <Header
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  className={classNames("__wab_instance", sty.header)}
                />

                <Reveal
                  className={classNames("__wab_instance", sty.reveal__kvXVq)}
                  delay={0.5 as const}
                  direction={"bottom-right" as const}
                  effect={"jackinthebox" as const}
                  triggerOnce={true}
                >
                  <ProductCarousel
                    data-plasmic-name={"home"}
                    data-plasmic-override={overrides.home}
                    className={classNames("__wab_instance", sty.home)}
                  />
                </Reveal>
              </div>
            </p.Stack>
            <div className={classNames(projectcss.all, sty.freeBox__nwnJ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rz9Jd
                )}
                id={"#new-arrivals" as const}
              >
                {"New Arrivals"}
              </div>
            </div>
            <ProductCollection
              className={classNames(
                "__wab_instance",
                sty.productCollection__fs40E
              )}
              count={8 as const}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__swd4X
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s1Hja
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              search={"" as const}
              sort={"latest-desc" as const}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__bVgqf)}
                    delay={0.5 as const}
                    direction={"down" as const}
                    effect={"zoom" as const}
                    triggerOnce={true}
                  >
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__sUt3X
                      )}
                      image={
                        <ProductMedia
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia__a80DD
                          )}
                        />
                      }
                    />
                  </Reveal>
                )}
              </ph.DataCtxReader>
            </ProductCollection>
            {true ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pYPaY)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://placekitten.com/300/200" as const}
              />
            ) : null}
            {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
              <div className={classNames(projectcss.all, sty.freeBox__tVgs)}>
                <p.PlasmicLink
                  data-plasmic-name={"products"}
                  data-plasmic-override={overrides.products}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.products
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Featured Products"}
                </p.PlasmicLink>
              </div>
            ) : null}
            <Reveal
              className={classNames("__wab_instance", sty.reveal__v3GEj)}
              triggerOnce={true}
            >
              <FeatureItem
                data-plasmic-name={"featureItem"}
                data-plasmic-override={overrides.featureItem}
                className={classNames("__wab_instance", sty.featureItem)}
              />
            </Reveal>
            <ProductCollection
              category={"626a86bfda5c2c00128ebdda" as const}
              className={classNames(
                "__wab_instance",
                sty.productCollection___1POsC
              )}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eyFen
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ydaBg
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__walkd)}
                    delay={0.5 as const}
                    direction={"right" as const}
                    effect={"bounce" as const}
                    triggerOnce={true}
                  >
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__qeBts
                      )}
                      image={
                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__gtcEt
                          )}
                          triggerOnce={true}
                        >
                          <ProductMedia
                            className={classNames(
                              "__wab_instance",
                              sty.productMedia__or73G
                            )}
                          />
                        </Reveal>
                      }
                    />
                  </Reveal>
                )}
              </ph.DataCtxReader>
            </ProductCollection>
            <div className={classNames(projectcss.all, sty.freeBox__v1O98)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bksfz
                )}
              >
                {"Latest Blog"}
              </div>
            </div>
            <Reveal
              cascade={false}
              className={classNames("__wab_instance", sty.reveal__miFTv)}
              delay={0.5 as const}
              direction={"left" as const}
              effect={"bounce" as const}
              reverse={false}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__hw1Ku)}>
                  <BlogPost
                    className={classNames(
                      "__wab_instance",
                      sty.blogPost__bUv2X
                    )}
                    image={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___0OtMq)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        src={{
                          src: "/plasmic/furn_e_commerce/images/b1.jpg",
                          fullWidth: 370,
                          fullHeight: 250,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__qPdZ4)}>
                  <BlogPost
                    className={classNames(
                      "__wab_instance",
                      sty.blogPost__jHZue
                    )}
                    image={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___5QKaT)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        src={{
                          src: "/plasmic/furn_e_commerce/images/b2.jpg",
                          fullWidth: 370,
                          fullHeight: 250,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__gLQdv)}>
                  <BlogPost
                    className={classNames(
                      "__wab_instance",
                      sty.blogPost__cujIm
                    )}
                    image={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__oSrnN)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        src={{
                          src: "/plasmic/furn_e_commerce/images/b3.jpg",
                          fullWidth: 370,
                          fullHeight: 250,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  />
                </div>
              </p.Stack>
            </Reveal>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__w8Bgw)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__h7Q5Q)}
                displayHeight={"60px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"90px" as const}
                src={{
                  src: "/plasmic/furn_e_commerce/images/adidas.png",
                  fullWidth: 90,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__p61Nt)}
                displayHeight={"60px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"91px" as const}
                src={{
                  src: "/plasmic/furn_e_commerce/images/hm.png",
                  fullWidth: 91,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__y6Wwr)}
                displayHeight={"60px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"98px" as const}
                src={{
                  src: "/plasmic/furn_e_commerce/images/kappa.png",
                  fullWidth: 98,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__jeR0C)}
                displayHeight={"60px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"124px" as const}
                src={{
                  src: "/plasmic/furn_e_commerce/images/lacoste.png",
                  fullWidth: 124,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__xfUe3)}
                displayHeight={"60px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"125px" as const}
                src={{
                  src: "/plasmic/furn_e_commerce/images/levis.png",
                  fullWidth: 125,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />
            </p.Stack>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "home",
    "products",
    "featureItem",
    "columns",
    "footer"
  ],
  header: ["header"],
  home: ["home"],
  products: ["products"],
  featureItem: ["featureItem"],
  columns: ["columns"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  home: typeof ProductCarousel;
  products: "a";
  featureItem: typeof FeatureItem;
  columns: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    home: makeNodeComponent("home"),
    products: makeNodeComponent("products"),
    featureItem: makeNodeComponent("featureItem"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "new arrivals",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
