// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jCmJKVw35RaDDpqbkpwXKJ
// Component: Fd6RmMDd-XPop3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: jCmJKVw35RaDDpqbkpwXKJ/projectcss
import sty from "./PlasmicRatings.module.css"; // plasmic-import: Fd6RmMDd-XPop3/css

import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: yM4qxr1O5B0t3b/icon

export type PlasmicRatings__VariantMembers = {
  stars: "zero" | "one" | "two" | "three" | "four" | "five";
};
export type PlasmicRatings__VariantsArgs = {
  stars?: SingleChoiceArg<"zero" | "one" | "two" | "three" | "four" | "five">;
};
type VariantPropType = keyof PlasmicRatings__VariantsArgs;
export const PlasmicRatings__VariantProps = new Array<VariantPropType>("stars");

export type PlasmicRatings__ArgsType = {
  numReviews?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRatings__ArgsType;
export const PlasmicRatings__ArgProps = new Array<ArgPropType>("numReviews");

export type PlasmicRatings__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultRatingsProps {
  numReviews?: React.ReactNode;
  stars?: SingleChoiceArg<"zero" | "one" | "two" | "three" | "four" | "five">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRatings__RenderFunc(props: {
  variants: PlasmicRatings__VariantsArgs;
  args: PlasmicRatings__ArgsType;
  overrides: PlasmicRatings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "stars",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stars
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstars_five]: hasVariant($state, "stars", "five"),
          [sty.rootstars_four]: hasVariant($state, "stars", "four"),
          [sty.rootstars_one]: hasVariant($state, "stars", "one"),
          [sty.rootstars_three]: hasVariant($state, "stars", "three"),
          [sty.rootstars_two]: hasVariant($state, "stars", "two"),
          [sty.rootstars_zero]: hasVariant($state, "stars", "zero")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(hasVariant($state, "stars", "zero") ? true : true) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg___3YxL6, {
              [sty.svgstars_five___3YxL6APpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_zero___3YxL6Dhmkt]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__bdO5, {
              [sty.svgstars_five__bdO5APpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__bdO5SeOyj]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__bdO55BPhR]: hasVariant($state, "stars", "one"),
              [sty.svgstars_three__bdO5BbUsf]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__bdO5Je3I0]: hasVariant($state, "stars", "two"),
              [sty.svgstars_zero__bdO5Dhmkt]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__ep5OV, {
              [sty.svgstars_five__ep5OVaPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__ep5OVseOyj]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__ep5OV5BPhR]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__ep5OVBbUsf]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__ep5OVje3I0]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__ep5OVdhmkt]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__cwNmT, {
              [sty.svgstars_five__cwNmTaPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__cwNmTseOyj]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__cwNmT5BPhR]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__cwNmTBbUsf]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__cwNmTje3I0]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__cwNmTdhmkt]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__t3RAc, {
              [sty.svgstars_five__t3RAcaPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__t3RAcseOyj]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__t3RAc5BPhR]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__t3RAcBbUsf]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__t3RACje3I0]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__t3RACdhmkt]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__e1NmE, {
              [sty.svgstars_five__e1NmEaPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__e1NmEseOyj]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__e1NmE5BPhR]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__e1NmEBbUsf]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__e1NmEje3I0]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__e1NmEdhmkt]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__fmKcB, {
              [sty.svgstars_five__fmKcBaPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__fmKcBseOyj]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_three__fmKcBBbUsf]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__fmKcBje3I0]: hasVariant($state, "stars", "two")
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg___4Arwm, {
              [sty.svgstars_five___4ArwmAPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four___4ArwmSeOyj]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_three___4ArwmBbUsf]: hasVariant(
                $state,
                "stars",
                "three"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__ryhFt, {
              [sty.svgstars_five__ryhFtAPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__ryhFtSeOyj]: hasVariant(
                $state,
                "stars",
                "four"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(hasVariant($state, "stars", "five") ? true : true) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__x2Kdf, {
              [sty.svgstars_five__x2KdfaPpyo]: hasVariant(
                $state,
                "stars",
                "five"
              )
            })}
            role={"img"}
          />
        ) : null}
      </p.Stack>
      {p.renderPlasmicSlot({
        defaultContents: "(45 Review)",
        value: args.numReviews,
        className: classNames(sty.slotTargetNumReviews)
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRatings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRatings__VariantsArgs;
    args?: PlasmicRatings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRatings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRatings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRatings__ArgProps,
          internalVariantPropNames: PlasmicRatings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRatings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRatings";
  } else {
    func.displayName = `PlasmicRatings.${nodeName}`;
  }
  return func;
}

export const PlasmicRatings = Object.assign(
  // Top-level PlasmicRatings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicRatings
    internalVariantProps: PlasmicRatings__VariantProps,
    internalArgProps: PlasmicRatings__ArgProps
  }
);

export default PlasmicRatings;
/* prettier-ignore-end */
